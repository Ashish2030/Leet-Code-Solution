class Solution 
{
    public boolean canPartition(int[] nums)
    {
        long sum=0;
        for(int i=0;i<nums.length;i++)
        {
            sum=sum+nums[i];
        }
        if(sum%2==0)
        {
           return x(nums,nums.length,(int)sum/2);
        }
        else
        {
          return false;  
        }
    }
    public boolean x(int arr[],int n,int sum)
    {
        /*
        if(n==0)
        {
            return false;
        }
        if(sum==0)
        {
           return true; 
        }
        boolean v=false;
        boolean r=false;
        if(arr[n-1]>=sum)
        {
            v=x(arr,n-1,sum-arr[n-1]);
        }
        r=x(arr,n-1,sum);
       return v||r;
       */
        boolean dp[][]=new boolean[n+1][sum+1];
        for(int i=0;i<=n;i++)
        {
            dp[i][0]=true;
        }
        for(int j=1;j<=sum;j++)
        {
             dp[0][j]=false;
        }
        
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=sum;j++)
            {
                boolean p=false;
                boolean q=false;
             
                 if(j>=arr[i-1])
                 {
                     p= dp[i-1][j-arr[i-1]];
                 }
                 q=dp[i-1][j];
                dp[i][j]=p||q;
                
                
                }
        }
        return dp[n][sum];
    }
}